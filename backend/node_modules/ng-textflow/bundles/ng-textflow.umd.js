(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-textflow', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (factory((global['ng-textflow'] = {}),global.ng.core,global.rxjs,global.rxjs.operators,global.ng.common));
}(this, (function (exports,core,rxjs,operators,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NodeComponent = (function () {
        // Inject services.
        function NodeComponent(renderer, elementRef) {
            this.renderer = renderer;
            this.elementRef = elementRef;
            this._heading = '';
            this._isVisible = false;
            this._pageNumberAtTop = false;
            this.showHeading = true;
            // Get host properties to dynamically change.
            this.hostPosition = '';
            this.hostVisibility = 'hidden';
            // Dynamic styles.
            this.numberStyle = {};
            this.headingStyle = {};
            this.nodeStyle = {};
            this.hostStyle = {};
            this.defaultStyles = {
                hostStyle: {},
                contentStyle: {
                    'height': '9em',
                    'width': '200px',
                    'fontSize': '11px',
                    'wordSpacing': '2px',
                    'textAlign': 'justify',
                    'lineHeight': '1.1em',
                    'leftAlignLast': 'justified'
                },
                headingStyle: {
                    'font-size': '14px',
                    'height': '25px'
                },
                numberStyle: {
                    'font-size': '10px',
                }
            };
            this.overflowSubject = new rxjs.Subject();
            this.overflow = /** @type {?} */ (this.overflowSubject);
            this.adding = false;
            this.finishing = false;
            this.trimming = false;
            this.count = 100;
        }
        /**
         * @return {?}
         */
        NodeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // Some initialisation.
                this.dummyText = this.text;
                this.trimming = true;
                // We use the mutation observer to see when our dummy text change has happened.
                this.changes = new MutationObserver(function (mutations) { return _this.manageState(); });
                this.changes.observe(this.dummyDivRef.nativeElement, { attributes: true, childList: true, characterData: true });
                // Kick off the state machine here, but with a delay for the first node,
                // since the initial loading of the component causes some delay in other initialisation. (I think).
                setTimeout(function () {
                    // Wait till index is resolved.
                    // We need to pause for the first node since the loading is lazy?
                    if (_this.index >= 99) {
                        setTimeout(function () { return _this.manageState(); }, 200); // TODO: find a event driven method here.
                    }
                    else {
                        // The following nodes do not need this delay.
                        // The following nodes do not need this delay.
                        _this.manageState();
                    }
                });
            };
        Object.defineProperty(NodeComponent.prototype, "dummyText", {
            // Some getter/setter methods.
            get: /**
             * @return {?}
             */ function () { return this.dummyDivRef.nativeElement.textContent; },
            set: /**
             * @param {?} content
             * @return {?}
             */ function (content) { this.dummyDivRef.nativeElement.textContent = content; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeComponent.prototype, "isVisible", {
            get: /**
             * @return {?}
             */ function () { return this._isVisible; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._isVisible = value;
                this.hostVisibility = 'visible';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeComponent.prototype, "index", {
            get: /**
             * @return {?}
             */ function () { return this._index; },
            set: /**
             * @param {?} index
             * @return {?}
             */ function (index) {
                var _this = this;
                this.pageNumber = 100 - index;
                setTimeout(function () {
                    _this._index = Math.abs(index);
                    _this.renderer.setStyle(_this.elementRef.nativeElement, 'z-index', index);
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeComponent.prototype, "width", {
            get: /**
             * @return {?}
             */ function () { return parseInt(this.mask.nativeElement.style.width.replace(/\D/g, '')); },
            set: /**
             * @param {?} width
             * @return {?}
             */ function (width) { this.renderer.setStyle(this.mask.nativeElement, 'width', width + "px"); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeComponent.prototype, "heading", {
            get: /**
             * @return {?}
             */ function () { return this._heading; },
            set: /**
             * @param {?} heading
             * @return {?}
             */ function (heading) {
                this._heading = heading === '' ? this._heading = ' ' : this._heading = heading;
                NodeComponent.headingChangedSubject.next();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeComponent.prototype, "pageNumberAtTop", {
            get: /**
             * @return {?}
             */ function () { return this._pageNumberAtTop; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._pageNumberAtTop = value;
                this.numberStyle['padding-bottom'] = this.pageNumberAtTop ? '0px' : this.padding + "px";
                this.numberStyle['padding-top'] = this.pageNumberAtTop ? this.padding + "px" : '0px';
            },
            enumerable: true,
            configurable: true
        });
        // Apply the style to the current node. Assumes the correct attributes are contained.
        /**
         * @param {?} style
         * @return {?}
         */
        NodeComponent.prototype.applyStyle = /**
         * @param {?} style
         * @return {?}
         */
            function (style) {
                this.nodeStyle = style.contentStyle ? this.convertStyleToPx(style.contentStyle) : this.convertStyleToPx(this.defaultStyles.contentStyle);
                this.numberStyle = style.numberStyle ? style.numberStyle : this.defaultStyles.numberStyle;
                this.hostStyle = style.hostStyle ? style.hostStyle : this.defaultStyles.hostStyle;
                // Let's manipulate the padding style that was added to manage top or bottom placed numbering.
                if (this.numberStyle.padding > '') {
                    this.padding = parseInt(this.numberStyle.padding.replace(/\D/g, ''));
                }
                else {
                    this.padding = 16;
                }
                this.numberStyle['padding-left'] = parseInt(this.nodeStyle.width.replace(/\D/g, '')) / 2 + "px";
                this.headingStyle = style.headingStyle ? style.headingStyle : this.defaultStyles.headingStyle;
                this.headingStyle.width = this.nodeStyle.width;
                this.renderer.setStyle(this.elementRef.nativeElement, 'width', style.width);
                this.nodeStyle.overflow = 'hidden';
                this.width = parseInt(this.nodeStyle.width.replace(/\D/g, ''));
                if (this.isOverlaid) {
                    this.hostPosition = 'absolute';
                }
            };
        /**
         * @param {?} style
         * @return {?}
         */
        NodeComponent.prototype.convertStyleToPx = /**
         * @param {?} style
         * @return {?}
         */
            function (style) {
                /** @type {?} */
                var tempStyle = style;
                /** @type {?} */
                var fontSizeSuffix = tempStyle['fontSize'].replace(/[\d\.]/g, '');
                /** @type {?} */
                var fontSize = parseFloat(tempStyle['fontSize'].replace(/[A-Za-z]/g, ''));
                for (var key in tempStyle) {
                    // Not we need to check each value only, for em, pt, px etc..
                    if (((tempStyle[key])).indexOf('em') > 0) {
                        /** @type {?} */
                        var suffix = tempStyle[key].replace(/[\d\.]/g, '');
                        switch (suffix) {
                            case 'em': {
                                /** @type {?} */
                                var value = parseFloat(tempStyle[key].replace(/[A-Za-z]/g, ''));
                                tempStyle[key] = Math.round(value * fontSize) + "px";
                            }
                        }
                    }
                }
                return tempStyle;
            };
        /**
         * @return {?}
         */
        NodeComponent.prototype.parseLineHeight = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var lineHeight = this.textDivRef.nativeElement.style.lineHeight;
                return parseInt(lineHeight.replace(/\D/g, ''));
            };
        /**
         * @return {?}
         */
        NodeComponent.prototype.compareDivs = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var lineHeight = this.parseLineHeight();
                /** @type {?} */
                var dummyLines = Math.floor(this.dummyDivRef.nativeElement.clientHeight / lineHeight);
                /** @type {?} */
                var contentLines = Math.floor(this.textDivRef.nativeElement.clientHeight / lineHeight);
                /** @type {?} */
                var dummyTextWordCount = this.dummyText.split(' ').length;
                return {
                    'lines': dummyLines,
                    'diffLines': dummyLines - contentLines,
                    'words': dummyTextWordCount
                };
            };
        /**
         * @return {?}
         */
        NodeComponent.prototype.manageState = /**
         * @return {?}
         */
            function () {
                // Protect against infinite loop.
                if (this.count-- <= 0) {
                    this.trimming = false;
                    this.adding = false;
                    this.finishing = false;
                    console.log('ERROR - loop count > 100');
                }
                if (this.trimming) {
                    this.trim();
                }
                else if (this.adding) {
                    this.addword();
                }
                else if (this.finishing) {
                    this.finish();
                }
            };
        /**
         * @return {?}
         */
        NodeComponent.prototype.trim = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var comps = this.compareDivs();
                /** @type {?} */
                var wordsToRemove = Math.floor(comps.words / comps.lines) * (comps.diffLines + 1);
                if (wordsToRemove > 0) {
                    this.dummyText = this.dummyText.split(' ').slice(0, comps.words - wordsToRemove).join(' ');
                }
                else {
                    this.trimming = false;
                    this.adding = true;
                    this.addword();
                }
            };
        /**
         * @return {?}
         */
        NodeComponent.prototype.addword = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var comps = this.compareDivs();
                if (comps.diffLines <= -1) {
                    if (this.dummyText.length < this.text.length) {
                        this.dummyText = this.dummyText + ' ' + this.text.split(' ')[comps.words];
                    }
                    else {
                        // This is the last node.
                        this.renderer.setStyle(this.textDivRef.nativeElement, 'textAlignLast', 'left');
                        NodeComponent.finishedSubject.next();
                    }
                }
                else {
                    // Take off the last word again.
                    this.dummyText = this.dummyText.split(' ').slice(0, comps.words - 1).join(' ');
                    this.adding = false;
                    this.finishing = true;
                }
            };
        /**
         * @return {?}
         */
        NodeComponent.prototype.finish = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var comps = this.compareDivs();
                /** @type {?} */
                var lastword = this.dummyText.split(' ');
                /** @type {?} */
                var overflowArray = this.text.split(' ');
                /** @type {?} */
                var overflow = overflowArray.slice(this.dummyText.split(' ').length).join(' ');
                this.text = this.dummyText;
                this.finishing = false;
                this.overflowSubject.next(overflow);
            };
        NodeComponent.finishedSubject = new rxjs.Subject();
        NodeComponent.finished = /** @type {?} */ (NodeComponent.finishedSubject);
        NodeComponent.headingChangedSubject = new rxjs.Subject();
        NodeComponent.headingChanged = NodeComponent.headingChangedSubject.pipe(operators.debounce(function () { return rxjs.interval(10); }));
        NodeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-node',
                        template: "\n    <div class=\"mask\" #maskTag [ngStyle]=\"hostStyle\">\n      <div *ngIf=\"showPageNumber && pageNumberAtTop\" [ngStyle]=\"numberStyle\">\n        {{pageNumber}}\n      </div>  \n      <div *ngIf=\"showHeading\" [ngStyle]=\"headingStyle\">\n        {{heading}}\n      </div>\n      <div #textref [ngStyle]=\"nodeStyle\" class=\"content\">\n        {{text}}\n        <div #dummy class=\"dummy\" >{{ dummyText }}</div>\n      </div>\n      <div *ngIf=\"showPageNumber && !pageNumberAtTop\" [ngStyle]=\"numberStyle\">\n        {{pageNumber}}\n      </div>\n    </div>\n",
                        styles: ["\n    .content {\n      position: relative;\n      text-align-last: justify;\n      cursor: default;\n    }\n    .mask {\n      display block;\n      overflow: hidden;\n    }\n    :host {\n      display: block;\n      overflow: hidden;\n      user-select: none;\n    }\n    .dummy {\n      position: absolute;\n      background-color: rgba(155, 255, 155, 0.4);\n      left: 0px;\n      top: 0px;\n      visibility: hidden;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        NodeComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: core.ElementRef }
            ];
        };
        NodeComponent.propDecorators = {
            textDivRef: [{ type: core.ViewChild, args: ['textref',] }],
            dummyDivRef: [{ type: core.ViewChild, args: ['dummy',] }],
            mask: [{ type: core.ViewChild, args: ['maskTag',] }],
            hostPosition: [{ type: core.HostBinding, args: ['style.position',] }],
            hostVisibility: [{ type: core.HostBinding, args: ['style.visibility',] }]
        };
        return NodeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CreateFlowService = (function () {
        function CreateFlowService(injector, resolver) {
            var _this = this;
            this.injector = injector;
            this.resolver = resolver;
            this.nodeList = new Array();
            this.firstOnTop = true;
            this.overFlowSubscriptions = [];
            this.nodesSubject = new rxjs.BehaviorSubject(null);
            this.nodes = /** @type {?} */ (this.nodesSubject);
            this.nodeFactory = this.resolver.resolveComponentFactory(NodeComponent);
            // When all nodes are finished generating, do some housework.
            this.finishedSubscription = NodeComponent.finished.subscribe(function () {
                _this.nodeList.forEach(function (node) { return node.isVisible = true; }); // Make all visible once complete.
                // If headings are modified externally, then update sibling nodes to maintain consistent formating.
                // If headings are modified externally, then update sibling nodes to maintain consistent formating.
                _this.headingChangedSubscription = NodeComponent.headingChanged.subscribe(function () {
                    /** @type {?} */
                    var count = 0;
                    _this.nodeList.forEach(function (node) {
                        count = node.heading <= ' ' ? count + 1 : count - 1;
                    });
                    // Loop again to update the visibility of the headings.
                    // Loop again to update the visibility of the headings.
                    _this.nodeList.forEach(function (node) {
                        node.showHeading = count === _this.nodeList.length ? false : true;
                    });
                });
                // Make list of nodes available once all are complete.
                // Make list of nodes available once all are complete.
                _this.nodesSubject.next(_this.nodeList);
            });
        }
        /**
         * @return {?}
         */
        CreateFlowService.prototype.clearNodes = /**
         * @return {?}
         */
            function () {
                this.nodeList = [];
            };
        // This will kick off a process that generates a node every time a generated node is too full and overflows with text.
        /**
         * @param {?} textPassage
         * @param {?} location
         * @param {?} style
         * @param {?} showPageNumbers
         * @param {?} isOverlaid
         * @return {?}
         */
        CreateFlowService.prototype.createFlow = /**
         * @param {?} textPassage
         * @param {?} location
         * @param {?} style
         * @param {?} showPageNumbers
         * @param {?} isOverlaid
         * @return {?}
         */
            function (textPassage, location, style, showPageNumbers, isOverlaid) {
                var _this = this;
                /** @type {?} */
                var node = this.createNode(textPassage, location, style, showPageNumbers, isOverlaid);
                // Create a new node if there is any overflow text from last node generated.
                // Last node will know when it is the last one, and will
                this.overFlowSubscriptions.push(node.overflow.subscribe(function (overflowText) {
                    if (overflowText) {
                        _this.createFlow(overflowText, location, style, showPageNumbers, isOverlaid);
                    }
                }));
            };
        /**
         * @param {?} content
         * @param {?=} location
         * @param {?=} style
         * @param {?=} showPageNumbers
         * @param {?=} isOverlaid
         * @return {?}
         */
        CreateFlowService.prototype.createNode = /**
         * @param {?} content
         * @param {?=} location
         * @param {?=} style
         * @param {?=} showPageNumbers
         * @param {?=} isOverlaid
         * @return {?}
         */
            function (content, location, style, showPageNumbers, isOverlaid) {
                /** @type {?} */
                var nodeRef;
                if (location || location instanceof core.ViewContainerRef) {
                    nodeRef = location.createComponent(this.nodeFactory, undefined, this.injector);
                }
                else {
                    nodeRef = this.nodeFactory.create(this.injector);
                }
                // Update the node
                nodeRef.instance.isOverlaid = isOverlaid;
                nodeRef.instance.showPageNumber = showPageNumbers;
                nodeRef.instance.text = content;
                if (style) {
                    nodeRef.instance.applyStyle(style);
                }
                // Add node to list of nodes and update its index value.
                this.nodeList.push(nodeRef.instance);
                nodeRef.instance.index = this.firstOnTop ? 100 - this.nodeList.length : this.nodeList.length;
                return nodeRef.instance;
            };
        // Tidy up subscriptions.
        /**
         * @return {?}
         */
        CreateFlowService.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.finishedSubscription.unsubscribe();
                this.headingChangedSubscription.unsubscribe();
                this.overFlowSubscriptions.forEach(function (subscription) {
                    subscription.unsubscribe();
                });
            };
        CreateFlowService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CreateFlowService.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ComponentFactoryResolver }
            ];
        };
        return CreateFlowService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgTextflowComponent = (function () {
        function NgTextflowComponent(nodeService) {
            this.nodeService = nodeService;
            this.nodeStyles = {};
            this.firstOnTop = true;
            nodeService.firstOnTop = this.firstOnTop;
        }
        Object.defineProperty(NgTextflowComponent.prototype, "content", {
            get: /**
             * @return {?}
             */ function () { return this._content; },
            set: /**
             * @param {?} text
             * @return {?}
             */ function (text) {
                this._content = text;
                // Clear the nodes out of the NodeComponent[] array.
                this.nodeService.clearNodes();
                this.viewContainer.clear();
                this.nodeService.createFlow(this.content, this.viewContainer, this.nodeStyles, this.showPageNumbers, this.isOverlaid);
            },
            enumerable: true,
            configurable: true
        });
        NgTextflowComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-textflow',
                        template: " \n    <ng-container #viewContainer></ng-container>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgTextflowComponent.ctorParameters = function () {
            return [
                { type: CreateFlowService }
            ];
        };
        NgTextflowComponent.propDecorators = {
            viewContainer: [{ type: core.ViewChild, args: ['viewContainer', { read: core.ViewContainerRef },] }],
            nodeStyles: [{ type: core.Input }],
            firstOnTop: [{ type: core.Input }],
            showPageNumbers: [{ type: core.Input }],
            isOverlaid: [{ type: core.Input }],
            content: [{ type: core.Input }]
        };
        return NgTextflowComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgTextflowModule = (function () {
        function NgTextflowModule() {
        }
        /**
         * @return {?}
         */
        NgTextflowModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: NgTextflowModule,
                    providers: [CreateFlowService]
                };
            };
        NgTextflowModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [NgTextflowComponent, NodeComponent],
                        entryComponents: [NodeComponent],
                        exports: [NgTextflowComponent]
                    },] }
        ];
        return NgTextflowModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgTextflowModule = NgTextflowModule;
    exports.NodeComponent = NodeComponent;
    exports.CreateFlowService = CreateFlowService;
    exports.ɵa = NgTextflowComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,