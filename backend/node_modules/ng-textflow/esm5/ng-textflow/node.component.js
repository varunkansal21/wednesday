/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ElementRef, ViewChild, Renderer2, HostBinding } from '@angular/core';
import { Subject, interval } from 'rxjs';
import { debounce } from 'rxjs/operators';
var NodeComponent = /** @class */ (function () {
    // Inject services.
    function NodeComponent(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this._heading = '';
        this._isVisible = false;
        this._pageNumberAtTop = false;
        this.showHeading = true;
        // Get host properties to dynamically change.
        this.hostPosition = '';
        this.hostVisibility = 'hidden';
        // Dynamic styles.
        this.numberStyle = {};
        this.headingStyle = {};
        this.nodeStyle = {};
        this.hostStyle = {};
        this.defaultStyles = {
            hostStyle: {},
            contentStyle: {
                'height': '9em',
                'width': '200px',
                'fontSize': '11px',
                'wordSpacing': '2px',
                'textAlign': 'justify',
                'lineHeight': '1.1em',
                'leftAlignLast': 'justified'
            },
            headingStyle: {
                'font-size': '14px',
                'height': '25px'
            },
            numberStyle: {
                'font-size': '10px',
            }
        };
        this.overflowSubject = new Subject();
        this.overflow = /** @type {?} */ (this.overflowSubject);
        this.adding = false;
        this.finishing = false;
        this.trimming = false;
        this.count = 100;
    }
    ;
    /**
     * @return {?}
     */
    NodeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Some initialisation.
        this.dummyText = this.text;
        this.trimming = true;
        // We use the mutation observer to see when our dummy text change has happened.
        this.changes = new MutationObserver(function (mutations) { return _this.manageState(); });
        this.changes.observe(this.dummyDivRef.nativeElement, { attributes: true, childList: true, characterData: true });
        // Kick off the state machine here, but with a delay for the first node,
        // since the initial loading of the component causes some delay in other initialisation. (I think).
        setTimeout(function () {
            // Wait till index is resolved.
            // We need to pause for the first node since the loading is lazy?
            if (_this.index >= 99) {
                setTimeout(function () { return _this.manageState(); }, 200); // TODO: find a event driven method here.
            }
            else {
                // The following nodes do not need this delay.
                // The following nodes do not need this delay.
                _this.manageState();
            }
        });
    };
    Object.defineProperty(NodeComponent.prototype, "dummyText", {
        // Some getter/setter methods.
        get: /**
         * @return {?}
         */
        function () { return this.dummyDivRef.nativeElement.textContent; },
        set: /**
         * @param {?} content
         * @return {?}
         */
        function (content) { this.dummyDivRef.nativeElement.textContent = content; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeComponent.prototype, "isVisible", {
        get: /**
         * @return {?}
         */
        function () { return this._isVisible; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isVisible = value;
            this.hostVisibility = 'visible';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeComponent.prototype, "index", {
        get: /**
         * @return {?}
         */
        function () { return this._index; },
        set: /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            var _this = this;
            this.pageNumber = 100 - index;
            setTimeout(function () {
                _this._index = Math.abs(index);
                _this.renderer.setStyle(_this.elementRef.nativeElement, 'z-index', index);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeComponent.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () { return parseInt(this.mask.nativeElement.style.width.replace(/\D/g, '')); },
        set: /**
         * @param {?} width
         * @return {?}
         */
        function (width) { this.renderer.setStyle(this.mask.nativeElement, 'width', width + "px"); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeComponent.prototype, "heading", {
        get: /**
         * @return {?}
         */
        function () { return this._heading; },
        set: /**
         * @param {?} heading
         * @return {?}
         */
        function (heading) {
            this._heading = heading === '' ? this._heading = ' ' : this._heading = heading;
            NodeComponent.headingChangedSubject.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeComponent.prototype, "pageNumberAtTop", {
        get: /**
         * @return {?}
         */
        function () { return this._pageNumberAtTop; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._pageNumberAtTop = value;
            this.numberStyle['padding-bottom'] = this.pageNumberAtTop ? '0px' : this.padding + "px";
            this.numberStyle['padding-top'] = this.pageNumberAtTop ? this.padding + "px" : '0px';
        },
        enumerable: true,
        configurable: true
    });
    // Apply the style to the current node. Assumes the correct attributes are contained.
    /**
     * @param {?} style
     * @return {?}
     */
    NodeComponent.prototype.applyStyle = /**
     * @param {?} style
     * @return {?}
     */
    function (style) {
        this.nodeStyle = style.contentStyle ? this.convertStyleToPx(style.contentStyle) : this.convertStyleToPx(this.defaultStyles.contentStyle);
        this.numberStyle = style.numberStyle ? style.numberStyle : this.defaultStyles.numberStyle;
        this.hostStyle = style.hostStyle ? style.hostStyle : this.defaultStyles.hostStyle;
        // Let's manipulate the padding style that was added to manage top or bottom placed numbering.
        if (this.numberStyle.padding > '') {
            this.padding = parseInt(this.numberStyle.padding.replace(/\D/g, ''));
        }
        else {
            this.padding = 16;
        }
        this.numberStyle['padding-left'] = parseInt(this.nodeStyle.width.replace(/\D/g, '')) / 2 + "px";
        this.headingStyle = style.headingStyle ? style.headingStyle : this.defaultStyles.headingStyle;
        this.headingStyle.width = this.nodeStyle.width;
        this.renderer.setStyle(this.elementRef.nativeElement, 'width', style.width);
        this.nodeStyle.overflow = 'hidden';
        this.width = parseInt(this.nodeStyle.width.replace(/\D/g, ''));
        if (this.isOverlaid) {
            this.hostPosition = 'absolute';
        }
    };
    /**
     * @param {?} style
     * @return {?}
     */
    NodeComponent.prototype.convertStyleToPx = /**
     * @param {?} style
     * @return {?}
     */
    function (style) {
        /** @type {?} */
        var tempStyle = style;
        /** @type {?} */
        var fontSizeSuffix = tempStyle['fontSize'].replace(/[\d\.]/g, '');
        /** @type {?} */
        var fontSize = parseFloat(tempStyle['fontSize'].replace(/[A-Za-z]/g, ''));
        for (var key in tempStyle) {
            // Not we need to check each value only, for em, pt, px etc..
            if ((/** @type {?} */ (tempStyle[key])).indexOf('em') > 0) {
                /** @type {?} */
                var suffix = tempStyle[key].replace(/[\d\.]/g, '');
                switch (suffix) {
                    case 'em': {
                        /** @type {?} */
                        var value = parseFloat(tempStyle[key].replace(/[A-Za-z]/g, ''));
                        tempStyle[key] = Math.round(value * fontSize) + "px";
                    }
                }
            }
        }
        return tempStyle;
    };
    /**
     * @return {?}
     */
    NodeComponent.prototype.parseLineHeight = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var lineHeight = this.textDivRef.nativeElement.style.lineHeight;
        return parseInt(lineHeight.replace(/\D/g, ''));
    };
    /**
     * @return {?}
     */
    NodeComponent.prototype.compareDivs = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var lineHeight = this.parseLineHeight();
        /** @type {?} */
        var dummyLines = Math.floor(this.dummyDivRef.nativeElement.clientHeight / lineHeight);
        /** @type {?} */
        var contentLines = Math.floor(this.textDivRef.nativeElement.clientHeight / lineHeight);
        /** @type {?} */
        var dummyTextWordCount = this.dummyText.split(' ').length;
        return {
            'lines': dummyLines,
            'diffLines': dummyLines - contentLines,
            'words': dummyTextWordCount
        };
    };
    /**
     * @return {?}
     */
    NodeComponent.prototype.manageState = /**
     * @return {?}
     */
    function () {
        // Protect against infinite loop.
        if (this.count-- <= 0) {
            this.trimming = false;
            this.adding = false;
            this.finishing = false;
            console.log('ERROR - loop count > 100');
        }
        if (this.trimming) {
            this.trim();
        }
        else if (this.adding) {
            this.addword();
        }
        else if (this.finishing) {
            this.finish();
        }
    };
    /**
     * @return {?}
     */
    NodeComponent.prototype.trim = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var comps = this.compareDivs();
        /** @type {?} */
        var wordsToRemove = Math.floor(comps.words / comps.lines) * (comps.diffLines + 1);
        if (wordsToRemove > 0) {
            this.dummyText = this.dummyText.split(' ').slice(0, comps.words - wordsToRemove).join(' ');
        }
        else {
            this.trimming = false;
            this.adding = true;
            this.addword();
        }
    };
    /**
     * @return {?}
     */
    NodeComponent.prototype.addword = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var comps = this.compareDivs();
        if (comps.diffLines <= -1) {
            if (this.dummyText.length < this.text.length) {
                this.dummyText = this.dummyText + ' ' + this.text.split(' ')[comps.words];
            }
            else {
                // This is the last node.
                this.renderer.setStyle(this.textDivRef.nativeElement, 'textAlignLast', 'left');
                NodeComponent.finishedSubject.next();
            }
        }
        else {
            // Take off the last word again.
            this.dummyText = this.dummyText.split(' ').slice(0, comps.words - 1).join(' ');
            this.adding = false;
            this.finishing = true;
        }
    };
    /**
     * @return {?}
     */
    NodeComponent.prototype.finish = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var comps = this.compareDivs();
        /** @type {?} */
        var lastword = this.dummyText.split(' ');
        /** @type {?} */
        var overflowArray = this.text.split(' ');
        /** @type {?} */
        var overflow = overflowArray.slice(this.dummyText.split(' ').length).join(' ');
        this.text = this.dummyText;
        this.finishing = false;
        this.overflowSubject.next(overflow);
    };
    NodeComponent.finishedSubject = new Subject();
    NodeComponent.finished = /** @type {?} */ (NodeComponent.finishedSubject);
    NodeComponent.headingChangedSubject = new Subject();
    NodeComponent.headingChanged = NodeComponent.headingChangedSubject.pipe(debounce(function () { return interval(10); }));
    NodeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-node',
                    template: "\n    <div class=\"mask\" #maskTag [ngStyle]=\"hostStyle\">\n      <div *ngIf=\"showPageNumber && pageNumberAtTop\" [ngStyle]=\"numberStyle\">\n        {{pageNumber}}\n      </div>  \n      <div *ngIf=\"showHeading\" [ngStyle]=\"headingStyle\">\n        {{heading}}\n      </div>\n      <div #textref [ngStyle]=\"nodeStyle\" class=\"content\">\n        {{text}}\n        <div #dummy class=\"dummy\" >{{ dummyText }}</div>\n      </div>\n      <div *ngIf=\"showPageNumber && !pageNumberAtTop\" [ngStyle]=\"numberStyle\">\n        {{pageNumber}}\n      </div>\n    </div>\n",
                    styles: ["\n    .content {\n      position: relative;\n      text-align-last: justify;\n      cursor: default;\n    }\n    .mask {\n      display block;\n      overflow: hidden;\n    }\n    :host {\n      display: block;\n      overflow: hidden;\n      user-select: none;\n    }\n    .dummy {\n      position: absolute;\n      background-color: rgba(155, 255, 155, 0.4);\n      left: 0px;\n      top: 0px;\n      visibility: hidden;\n    }\n  "]
                }] }
    ];
    /** @nocollapse */
    NodeComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    NodeComponent.propDecorators = {
        textDivRef: [{ type: ViewChild, args: ['textref',] }],
        dummyDivRef: [{ type: ViewChild, args: ['dummy',] }],
        mask: [{ type: ViewChild, args: ['maskTag',] }],
        hostPosition: [{ type: HostBinding, args: ['style.position',] }],
        hostVisibility: [{ type: HostBinding, args: ['style.visibility',] }]
    };
    return NodeComponent;
}());
export { NodeComponent };
if (false) {
    /** @type {?} */
    NodeComponent.finishedSubject;
    /** @type {?} */
    NodeComponent.finished;
    /** @type {?} */
    NodeComponent.headingChangedSubject;
    /** @type {?} */
    NodeComponent.headingChanged;
    /** @type {?} */
    NodeComponent.prototype.textDivRef;
    /** @type {?} */
    NodeComponent.prototype.dummyDivRef;
    /** @type {?} */
    NodeComponent.prototype.mask;
    /** @type {?} */
    NodeComponent.prototype._index;
    /** @type {?} */
    NodeComponent.prototype._heading;
    /** @type {?} */
    NodeComponent.prototype._isVisible;
    /** @type {?} */
    NodeComponent.prototype._pageNumberAtTop;
    /** @type {?} */
    NodeComponent.prototype.changes;
    /** @type {?} */
    NodeComponent.prototype.padding;
    /** @type {?} */
    NodeComponent.prototype.showHeading;
    /** @type {?} */
    NodeComponent.prototype.text;
    /** @type {?} */
    NodeComponent.prototype.showPageNumber;
    /** @type {?} */
    NodeComponent.prototype.isOverlaid;
    /** @type {?} */
    NodeComponent.prototype.pageNumber;
    /** @type {?} */
    NodeComponent.prototype.hostPosition;
    /** @type {?} */
    NodeComponent.prototype.hostVisibility;
    /** @type {?} */
    NodeComponent.prototype.numberStyle;
    /** @type {?} */
    NodeComponent.prototype.headingStyle;
    /** @type {?} */
    NodeComponent.prototype.nodeStyle;
    /** @type {?} */
    NodeComponent.prototype.hostStyle;
    /** @type {?} */
    NodeComponent.prototype.defaultStyles;
    /** @type {?} */
    NodeComponent.prototype.overflowSubject;
    /** @type {?} */
    NodeComponent.prototype.overflow;
    /** @type {?} */
    NodeComponent.prototype.adding;
    /** @type {?} */
    NodeComponent.prototype.finishing;
    /** @type {?} */
    NodeComponent.prototype.trimming;
    /** @type {?} */
    NodeComponent.prototype.count;
    /** @type {?} */
    NodeComponent.prototype.renderer;
    /** @type {?} */
    NodeComponent.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,