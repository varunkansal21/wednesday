/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { NodeComponent } from './node.component';
import { BehaviorSubject } from 'rxjs';
var CreateFlowService = /** @class */ (function () {
    function CreateFlowService(injector, resolver) {
        var _this = this;
        this.injector = injector;
        this.resolver = resolver;
        this.nodeList = new Array();
        this.firstOnTop = true;
        this.overFlowSubscriptions = [];
        this.nodesSubject = new BehaviorSubject(null);
        this.nodes = /** @type {?} */ (this.nodesSubject);
        this.nodeFactory = this.resolver.resolveComponentFactory(NodeComponent);
        // When all nodes are finished generating, do some housework.
        this.finishedSubscription = NodeComponent.finished.subscribe(function () {
            _this.nodeList.forEach(function (node) { return node.isVisible = true; }); // Make all visible once complete.
            // If headings are modified externally, then update sibling nodes to maintain consistent formating.
            // If headings are modified externally, then update sibling nodes to maintain consistent formating.
            _this.headingChangedSubscription = NodeComponent.headingChanged.subscribe(function () {
                /** @type {?} */
                var count = 0;
                _this.nodeList.forEach(function (node) {
                    count = node.heading <= ' ' ? count + 1 : count - 1;
                });
                // Loop again to update the visibility of the headings.
                // Loop again to update the visibility of the headings.
                _this.nodeList.forEach(function (node) {
                    node.showHeading = count === _this.nodeList.length ? false : true;
                });
            });
            // Make list of nodes available once all are complete.
            // Make list of nodes available once all are complete.
            _this.nodesSubject.next(_this.nodeList);
        });
    }
    /**
     * @return {?}
     */
    CreateFlowService.prototype.clearNodes = /**
     * @return {?}
     */
    function () {
        this.nodeList = [];
    };
    // This will kick off a process that generates a node every time a generated node is too full and overflows with text.
    /**
     * @param {?} textPassage
     * @param {?} location
     * @param {?} style
     * @param {?} showPageNumbers
     * @param {?} isOverlaid
     * @return {?}
     */
    CreateFlowService.prototype.createFlow = /**
     * @param {?} textPassage
     * @param {?} location
     * @param {?} style
     * @param {?} showPageNumbers
     * @param {?} isOverlaid
     * @return {?}
     */
    function (textPassage, location, style, showPageNumbers, isOverlaid) {
        var _this = this;
        /** @type {?} */
        var node = this.createNode(textPassage, location, style, showPageNumbers, isOverlaid);
        // Create a new node if there is any overflow text from last node generated.
        // Last node will know when it is the last one, and will
        this.overFlowSubscriptions.push(node.overflow.subscribe(function (overflowText) {
            if (overflowText) {
                _this.createFlow(overflowText, location, style, showPageNumbers, isOverlaid);
            }
        }));
    };
    /**
     * @param {?} content
     * @param {?=} location
     * @param {?=} style
     * @param {?=} showPageNumbers
     * @param {?=} isOverlaid
     * @return {?}
     */
    CreateFlowService.prototype.createNode = /**
     * @param {?} content
     * @param {?=} location
     * @param {?=} style
     * @param {?=} showPageNumbers
     * @param {?=} isOverlaid
     * @return {?}
     */
    function (content, location, style, showPageNumbers, isOverlaid) {
        /** @type {?} */
        var nodeRef;
        if (location || location instanceof ViewContainerRef) {
            nodeRef = location.createComponent(this.nodeFactory, undefined, this.injector);
        }
        else {
            nodeRef = this.nodeFactory.create(this.injector);
        }
        // Update the node
        nodeRef.instance.isOverlaid = isOverlaid;
        nodeRef.instance.showPageNumber = showPageNumbers;
        nodeRef.instance.text = content;
        if (style) {
            nodeRef.instance.applyStyle(style);
        }
        // Add node to list of nodes and update its index value.
        this.nodeList.push(nodeRef.instance);
        nodeRef.instance.index = this.firstOnTop ? 100 - this.nodeList.length : this.nodeList.length;
        return nodeRef.instance;
    };
    // Tidy up subscriptions.
    /**
     * @return {?}
     */
    CreateFlowService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.finishedSubscription.unsubscribe();
        this.headingChangedSubscription.unsubscribe();
        this.overFlowSubscriptions.forEach(function (subscription) {
            subscription.unsubscribe();
        });
    };
    CreateFlowService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CreateFlowService.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentFactoryResolver }
    ]; };
    return CreateFlowService;
}());
export { CreateFlowService };
if (false) {
    /** @type {?} */
    CreateFlowService.prototype.nodeList;
    /** @type {?} */
    CreateFlowService.prototype.nodeFactory;
    /** @type {?} */
    CreateFlowService.prototype.firstOnTop;
    /** @type {?} */
    CreateFlowService.prototype.finishedSubscription;
    /** @type {?} */
    CreateFlowService.prototype.headingChangedSubscription;
    /** @type {?} */
    CreateFlowService.prototype.overFlowSubscriptions;
    /** @type {?} */
    CreateFlowService.prototype.nodesSubject;
    /** @type {?} */
    CreateFlowService.prototype.nodes;
    /** @type {?} */
    CreateFlowService.prototype.injector;
    /** @type {?} */
    CreateFlowService.prototype.resolver;
}

//# sourceMappingURL=data:application/json;base64,