/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ViewChild, ViewContainerRef, Input } from '@angular/core';
import { CreateFlowService } from './create-flow.service';
var NgTextflowComponent = /** @class */ (function () {
    function NgTextflowComponent(nodeService) {
        this.nodeService = nodeService;
        this.nodeStyles = {};
        this.firstOnTop = true;
        nodeService.firstOnTop = this.firstOnTop;
    }
    Object.defineProperty(NgTextflowComponent.prototype, "content", {
        get: /**
         * @return {?}
         */
        function () { return this._content; },
        set: /**
         * @param {?} text
         * @return {?}
         */
        function (text) {
            this._content = text;
            // Clear the nodes out of the NodeComponent[] array.
            this.nodeService.clearNodes();
            this.viewContainer.clear();
            this.nodeService.createFlow(this.content, this.viewContainer, this.nodeStyles, this.showPageNumbers, this.isOverlaid);
        },
        enumerable: true,
        configurable: true
    });
    NgTextflowComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-textflow',
                    template: " \n    <ng-container #viewContainer></ng-container>\n  "
                }] }
    ];
    /** @nocollapse */
    NgTextflowComponent.ctorParameters = function () { return [
        { type: CreateFlowService }
    ]; };
    NgTextflowComponent.propDecorators = {
        viewContainer: [{ type: ViewChild, args: ['viewContainer', { read: ViewContainerRef },] }],
        nodeStyles: [{ type: Input }],
        firstOnTop: [{ type: Input }],
        showPageNumbers: [{ type: Input }],
        isOverlaid: [{ type: Input }],
        content: [{ type: Input }]
    };
    return NgTextflowComponent;
}());
export { NgTextflowComponent };
if (false) {
    /** @type {?} */
    NgTextflowComponent.prototype.viewContainer;
    /** @type {?} */
    NgTextflowComponent.prototype.nodeStyles;
    /** @type {?} */
    NgTextflowComponent.prototype.firstOnTop;
    /** @type {?} */
    NgTextflowComponent.prototype.showPageNumbers;
    /** @type {?} */
    NgTextflowComponent.prototype.isOverlaid;
    /** @type {?} */
    NgTextflowComponent.prototype._content;
    /** @type {?} */
    NgTextflowComponent.prototype.nodeService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdGV4dGZsb3cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctdGV4dGZsb3cvIiwic291cmNlcyI6WyJuZy10ZXh0Zmxvdy9uZy10ZXh0Zmxvdy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUNULGdCQUFnQixFQUNoQixLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0lBNEJ4RCw2QkFBb0IsV0FBOEI7UUFBOUIsZ0JBQVcsR0FBWCxXQUFXLENBQW1COzBCQWhCdkIsRUFBRTswQkFDRSxJQUFJO1FBZ0JqQyxXQUFXLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7S0FDMUM7SUFYRCxzQkFBSSx3Q0FBTzs7OztRQUFYLGNBQXdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7Ozs7O1FBQy9DLFVBQXFCLElBQVk7WUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7O1lBRXJCLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMzQixJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN2SDs7O09BUDhDOztnQkFqQmhELFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsUUFBUSxFQUFFLHlEQUVUO2lCQUNGOzs7O2dCQVBRLGlCQUFpQjs7O2dDQVd2QixTQUFTLFNBQUMsZUFBZSxFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFDOzZCQUNwRCxLQUFLOzZCQUNMLEtBQUs7a0NBQ0wsS0FBSzs2QkFDTCxLQUFLOzBCQUtMLEtBQUs7OzhCQXpCUjs7U0FlYSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBWaWV3Q2hpbGQsIFxyXG4gIFZpZXdDb250YWluZXJSZWYsXHJcbiAgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDcmVhdGVGbG93U2VydmljZSB9IGZyb20gJy4vY3JlYXRlLWZsb3cuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25nLXRleHRmbG93JyxcclxuICB0ZW1wbGF0ZTogYCBcclxuICAgIDxuZy1jb250YWluZXIgI3ZpZXdDb250YWluZXI+PC9uZy1jb250YWluZXI+XHJcbiAgYFxyXG59KVxyXG4vLyBBIGJhc2ljIGNvbXBvbmVudCB0aGF0IHVzZXMgdGhlIENyZWF0ZUZsb3dTZXJ2aWNlIHRvIGdlbmVyYXRlIGFuZCBkaXNwbGF5IHRoZSBub2Rlc1xyXG4vLyBiYXNlZCBvbiB0aGUgY29udGVudCBwcm92aWRlZCBpbiB0aGVzZSBpbnB1dHMuXHJcbmV4cG9ydCBjbGFzcyBOZ1RleHRmbG93Q29tcG9uZW50IHtcclxuICBAVmlld0NoaWxkKCd2aWV3Q29udGFpbmVyJywgeyByZWFkOiBWaWV3Q29udGFpbmVyUmVmfSkgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZjtcclxuICBASW5wdXQoKSBub2RlU3R5bGVzOiBhbnkgPSB7fTtcclxuICBASW5wdXQoKSBmaXJzdE9uVG9wOiBib29sZWFuID0gdHJ1ZTtcclxuICBASW5wdXQoKSBzaG93UGFnZU51bWJlcnM6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgaXNPdmVybGFpZDogYm9vbGVhbjtcclxuICBcclxuICAvLyBDb250ZW50IGNoYW5nZSBoYW5kbGluZy5cclxuICBwcml2YXRlIF9jb250ZW50OiBzdHJpbmc7XHJcbiAgZ2V0IGNvbnRlbnQoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7IH1cclxuICBASW5wdXQoKSBzZXQgY29udGVudCh0ZXh0OiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX2NvbnRlbnQgPSB0ZXh0O1xyXG4gICAgLy8gQ2xlYXIgdGhlIG5vZGVzIG91dCBvZiB0aGUgTm9kZUNvbXBvbmVudFtdIGFycmF5LlxyXG4gICAgdGhpcy5ub2RlU2VydmljZS5jbGVhck5vZGVzKCk7XHJcbiAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcclxuICAgIHRoaXMubm9kZVNlcnZpY2UuY3JlYXRlRmxvdyh0aGlzLmNvbnRlbnQsIHRoaXMudmlld0NvbnRhaW5lciwgdGhpcy5ub2RlU3R5bGVzLCB0aGlzLnNob3dQYWdlTnVtYmVycywgdGhpcy5pc092ZXJsYWlkKTsgICAgXHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5vZGVTZXJ2aWNlOiBDcmVhdGVGbG93U2VydmljZSkge1xyXG4gICAgbm9kZVNlcnZpY2UuZmlyc3RPblRvcCA9IHRoaXMuZmlyc3RPblRvcDtcclxuICB9IFxyXG59XHJcbiJdfQ==