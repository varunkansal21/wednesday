/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ViewChild, ViewContainerRef, Input } from '@angular/core';
import { CreateFlowService } from './create-flow.service';
// A basic component that uses the CreateFlowService to generate and display the nodes
// based on the content provided in these inputs.
export class NgTextflowComponent {
    /**
     * @param {?} nodeService
     */
    constructor(nodeService) {
        this.nodeService = nodeService;
        this.nodeStyles = {};
        this.firstOnTop = true;
        nodeService.firstOnTop = this.firstOnTop;
    }
    /**
     * @return {?}
     */
    get content() { return this._content; }
    /**
     * @param {?} text
     * @return {?}
     */
    set content(text) {
        this._content = text;
        // Clear the nodes out of the NodeComponent[] array.
        this.nodeService.clearNodes();
        this.viewContainer.clear();
        this.nodeService.createFlow(this.content, this.viewContainer, this.nodeStyles, this.showPageNumbers, this.isOverlaid);
    }
}
NgTextflowComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-textflow',
                template: ` 
    <ng-container #viewContainer></ng-container>
  `
            }] }
];
/** @nocollapse */
NgTextflowComponent.ctorParameters = () => [
    { type: CreateFlowService }
];
NgTextflowComponent.propDecorators = {
    viewContainer: [{ type: ViewChild, args: ['viewContainer', { read: ViewContainerRef },] }],
    nodeStyles: [{ type: Input }],
    firstOnTop: [{ type: Input }],
    showPageNumbers: [{ type: Input }],
    isOverlaid: [{ type: Input }],
    content: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgTextflowComponent.prototype.viewContainer;
    /** @type {?} */
    NgTextflowComponent.prototype.nodeStyles;
    /** @type {?} */
    NgTextflowComponent.prototype.firstOnTop;
    /** @type {?} */
    NgTextflowComponent.prototype.showPageNumbers;
    /** @type {?} */
    NgTextflowComponent.prototype.isOverlaid;
    /** @type {?} */
    NgTextflowComponent.prototype._content;
    /** @type {?} */
    NgTextflowComponent.prototype.nodeService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdGV4dGZsb3cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctdGV4dGZsb3cvIiwic291cmNlcyI6WyJuZy10ZXh0Zmxvdy9uZy10ZXh0Zmxvdy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUNULGdCQUFnQixFQUNoQixLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFMUQ7O0FBUUEsTUFBTTs7OztJQWtCSixZQUFvQixXQUE4QjtRQUE5QixnQkFBVyxHQUFYLFdBQVcsQ0FBbUI7MEJBaEJ2QixFQUFFOzBCQUNFLElBQUk7UUFnQmpDLFdBQVcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztLQUMxQzs7OztJQVhELElBQUksT0FBTyxLQUFhLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7Ozs7O0lBQy9DLElBQWEsT0FBTyxDQUFDLElBQVk7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7O1FBRXJCLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUN2SDs7O1lBeEJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsUUFBUSxFQUFFOztHQUVUO2FBQ0Y7Ozs7WUFQUSxpQkFBaUI7Ozs0QkFXdkIsU0FBUyxTQUFDLGVBQWUsRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBQzt5QkFDcEQsS0FBSzt5QkFDTCxLQUFLOzhCQUNMLEtBQUs7eUJBQ0wsS0FBSztzQkFLTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDb21wb25lbnQsXHJcbiAgVmlld0NoaWxkLCBcclxuICBWaWV3Q29udGFpbmVyUmVmLFxyXG4gIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ3JlYXRlRmxvd1NlcnZpY2UgfSBmcm9tICcuL2NyZWF0ZS1mbG93LnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZy10ZXh0ZmxvdycsXHJcbiAgdGVtcGxhdGU6IGAgXHJcbiAgICA8bmctY29udGFpbmVyICN2aWV3Q29udGFpbmVyPjwvbmctY29udGFpbmVyPlxyXG4gIGBcclxufSlcclxuLy8gQSBiYXNpYyBjb21wb25lbnQgdGhhdCB1c2VzIHRoZSBDcmVhdGVGbG93U2VydmljZSB0byBnZW5lcmF0ZSBhbmQgZGlzcGxheSB0aGUgbm9kZXNcclxuLy8gYmFzZWQgb24gdGhlIGNvbnRlbnQgcHJvdmlkZWQgaW4gdGhlc2UgaW5wdXRzLlxyXG5leHBvcnQgY2xhc3MgTmdUZXh0Zmxvd0NvbXBvbmVudCB7XHJcbiAgQFZpZXdDaGlsZCgndmlld0NvbnRhaW5lcicsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZn0pIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWY7XHJcbiAgQElucHV0KCkgbm9kZVN0eWxlczogYW55ID0ge307XHJcbiAgQElucHV0KCkgZmlyc3RPblRvcDogYm9vbGVhbiA9IHRydWU7XHJcbiAgQElucHV0KCkgc2hvd1BhZ2VOdW1iZXJzOiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIGlzT3ZlcmxhaWQ6IGJvb2xlYW47XHJcbiAgXHJcbiAgLy8gQ29udGVudCBjaGFuZ2UgaGFuZGxpbmcuXHJcbiAgcHJpdmF0ZSBfY29udGVudDogc3RyaW5nO1xyXG4gIGdldCBjb250ZW50KCk6IHN0cmluZyB7IHJldHVybiB0aGlzLl9jb250ZW50OyB9XHJcbiAgQElucHV0KCkgc2V0IGNvbnRlbnQodGV4dDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLl9jb250ZW50ID0gdGV4dDtcclxuICAgIC8vIENsZWFyIHRoZSBub2RlcyBvdXQgb2YgdGhlIE5vZGVDb21wb25lbnRbXSBhcnJheS5cclxuICAgIHRoaXMubm9kZVNlcnZpY2UuY2xlYXJOb2RlcygpO1xyXG4gICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XHJcbiAgICB0aGlzLm5vZGVTZXJ2aWNlLmNyZWF0ZUZsb3codGhpcy5jb250ZW50LCB0aGlzLnZpZXdDb250YWluZXIsIHRoaXMubm9kZVN0eWxlcywgdGhpcy5zaG93UGFnZU51bWJlcnMsIHRoaXMuaXNPdmVybGFpZCk7ICAgIFxyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBub2RlU2VydmljZTogQ3JlYXRlRmxvd1NlcnZpY2UpIHtcclxuICAgIG5vZGVTZXJ2aWNlLmZpcnN0T25Ub3AgPSB0aGlzLmZpcnN0T25Ub3A7XHJcbiAgfSBcclxufVxyXG4iXX0=