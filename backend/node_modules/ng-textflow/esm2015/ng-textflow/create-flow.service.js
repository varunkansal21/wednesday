/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { NodeComponent } from './node.component';
import { BehaviorSubject } from 'rxjs';
export class CreateFlowService {
    /**
     * @param {?} injector
     * @param {?} resolver
     */
    constructor(injector, resolver) {
        this.injector = injector;
        this.resolver = resolver;
        this.nodeList = new Array();
        this.firstOnTop = true;
        this.overFlowSubscriptions = [];
        this.nodesSubject = new BehaviorSubject(null);
        this.nodes = /** @type {?} */ (this.nodesSubject);
        this.nodeFactory = this.resolver.resolveComponentFactory(NodeComponent);
        // When all nodes are finished generating, do some housework.
        this.finishedSubscription = NodeComponent.finished.subscribe(() => {
            this.nodeList.forEach(node => node.isVisible = true); // Make all visible once complete.
            // If headings are modified externally, then update sibling nodes to maintain consistent formating.
            this.headingChangedSubscription = NodeComponent.headingChanged.subscribe(() => {
                /** @type {?} */
                let count = 0;
                this.nodeList.forEach(node => {
                    count = node.heading <= ' ' ? count + 1 : count - 1;
                });
                // Loop again to update the visibility of the headings.
                this.nodeList.forEach(node => {
                    node.showHeading = count === this.nodeList.length ? false : true;
                });
            });
            // Make list of nodes available once all are complete.
            this.nodesSubject.next(this.nodeList);
        });
    }
    /**
     * @return {?}
     */
    clearNodes() {
        this.nodeList = [];
    }
    /**
     * @param {?} textPassage
     * @param {?} location
     * @param {?} style
     * @param {?} showPageNumbers
     * @param {?} isOverlaid
     * @return {?}
     */
    createFlow(textPassage, location, style, showPageNumbers, isOverlaid) {
        /** @type {?} */
        let node = this.createNode(textPassage, location, style, showPageNumbers, isOverlaid);
        // Create a new node if there is any overflow text from last node generated.
        // Last node will know when it is the last one, and will
        this.overFlowSubscriptions.push(node.overflow.subscribe(overflowText => {
            if (overflowText) {
                this.createFlow(overflowText, location, style, showPageNumbers, isOverlaid);
            }
        }));
    }
    /**
     * @param {?} content
     * @param {?=} location
     * @param {?=} style
     * @param {?=} showPageNumbers
     * @param {?=} isOverlaid
     * @return {?}
     */
    createNode(content, location, style, showPageNumbers, isOverlaid) {
        /** @type {?} */
        let nodeRef;
        if (location || location instanceof ViewContainerRef) {
            nodeRef = location.createComponent(this.nodeFactory, undefined, this.injector);
        }
        else {
            nodeRef = this.nodeFactory.create(this.injector);
        }
        // Update the node
        nodeRef.instance.isOverlaid = isOverlaid;
        nodeRef.instance.showPageNumber = showPageNumbers;
        nodeRef.instance.text = content;
        if (style) {
            nodeRef.instance.applyStyle(style);
        }
        // Add node to list of nodes and update its index value.
        this.nodeList.push(nodeRef.instance);
        nodeRef.instance.index = this.firstOnTop ? 100 - this.nodeList.length : this.nodeList.length;
        return nodeRef.instance;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.finishedSubscription.unsubscribe();
        this.headingChangedSubscription.unsubscribe();
        this.overFlowSubscriptions.forEach(subscription => {
            subscription.unsubscribe();
        });
    }
}
CreateFlowService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CreateFlowService.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver }
];
if (false) {
    /** @type {?} */
    CreateFlowService.prototype.nodeList;
    /** @type {?} */
    CreateFlowService.prototype.nodeFactory;
    /** @type {?} */
    CreateFlowService.prototype.firstOnTop;
    /** @type {?} */
    CreateFlowService.prototype.finishedSubscription;
    /** @type {?} */
    CreateFlowService.prototype.headingChangedSubscription;
    /** @type {?} */
    CreateFlowService.prototype.overFlowSubscriptions;
    /** @type {?} */
    CreateFlowService.prototype.nodesSubject;
    /** @type {?} */
    CreateFlowService.prototype.nodes;
    /** @type {?} */
    CreateFlowService.prototype.injector;
    /** @type {?} */
    CreateFlowService.prototype.resolver;
}

//# sourceMappingURL=data:application/json;base64,